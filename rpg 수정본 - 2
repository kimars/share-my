const FS = FileStream;
let path = "/sdcard/rpg/.json";
let users = {};

// 사용자 데이터 파일 저장
function saveUserData() {
    let data = JSON.stringify(users, null, 4); // 데이터를 JSON 형식으로 변환
    FS.write(path, data); // 파일에 데이터 저장
}

// 사용자 데이터 파일 로드
function loadUserData() {
    if (!FS.read(path)) { // 파일이 존재하지 않으면
        users = {}; // 기본값으로 설정
    } else {
        let data = FS.read(path); // 파일 읽기
        users = JSON.parse(data); // 데이터를 JavaScript 객체로 변환
    }
}


// 전역 변수 및 객체 선언
var player = {
  name: "용사",
  level: 1,
  exp: 0,
  hp: 100,
  maxHp: 100,
  mp: 50,
  maxMp: 50,
  attack: 10,
  defense: 5,
  gold: 0,
  inventory: [],
  equippedWeapon: null,
  skills: []
};

var quests = [
  { id: 1, name: "고블린 퇴치", description: "고블린 5마리 처치", target: 5, progress: 0, reward: 100 },
  { id: 2, name: "보물 찾기", description: "숨겨진 보물 상자 찾기", target: 1, progress: 0, reward: 200 },
  { id: 3, name: "약초 수집", description: "희귀 약초 3개 수집", target: 3, progress: 0, reward: 150 },
  { id: 4, name: "늑대 사냥", description: "위험한 늑대 3마리 처치", target: 3, progress: 0, reward: 250 },
  { id: 5, name: "마을 순찰", description: "마을 주변 10바퀴 순찰", target: 10, progress: 0, reward: 120 },
  { id: 6, name: "던전 탐험", description: "깊은 던전 3층까지 탐험", target: 3, progress: 0, reward: 300 },
  { id: 7, name: "요리 대회", description: "특별한 요리 5개 만들기", target: 5, progress: 0, reward: 180 },
  { id: 8, name: "유령 퇴치", description: "마을을 떠도는 유령 3마리 퇴치", target: 3, progress: 0, reward: 280 }
];

var items = [
  { id: 1, name: "소형 체력 포션", effect: "hp", value: 30 },
  { id: 2, name: "중형 체력 포션", effect: "hp", value: 60 },
  { id: 3, name: "대형 체력 포션", effect: "hp", value: 100 },
  { id: 4, name: "소형 마나 포션", effect: "mp", value: 20 },
  { id: 5, name: "중형 마나 포션", effect: "mp", value: 40 },
  { id: 6, name: "대형 마나 포션", effect: "mp", value: 70 },
  { id: 7, name: "골드", effect: "gold", value: 50 },
  { id: 8, name: "경험치 물약", effect: "exp", value: 100 },
  { id: 9, name: "힘의 물약", effect: "attack", value: 5 },
  { id: 10, name: "방어의 물약", effect: "defense", value: 5 },
  { id: 11, name: "속도의 깃털", effect: "speed", value: 10 },
  { id: 12, name: "행운의 동전", effect: "luck", value: 5 },
  { id: 13, name: "부활의 깃털", effect: "revive", value: 1 },
  { id: 14, name: "독 해독제", effect: "cure", value: 1 },
  { id: 15, name: "화염 저항 물약", effect: "fireResist", value: 20 }
];

var weapons = [
  { id: 1, name: "목검", attack: 5, type: "근접", description: "기본적인 나무 검입니다." },
  { id: 2, name: "철검", attack: 10, type: "근접", description: "튼튼한 철로 만든 검입니다." },
  { id: 3, name: "마법 지팡이", attack: 15, type: "마법", description: "마법 공격력을 높여주는 지팡이입니다." },
  { id: 4, name: "장궁", attack: 12, type: "원거리", description: "멀리 있는 적을 공격할 수 있는 활입니다." },
  { id: 5, name: "대검", attack: 18, type: "근접", description: "무겁지만 강력한 대형 검입니다." },
  { id: 6, name: "단검", attack: 8, speed: 2, type: "근접", description: "빠르게 공격할 수 있는 작은 칼입니다." },
  { id: 7, name: "마법 서적", attack: 20, mpBoost: 20, type: "마법", description: "마법 공격력과 MP를 높여주는 책입니다." },
  { id: 8, name: "창", attack: 15, range: 2, type: "근접", description: "긴 범위로 공격할 수 있는 창입니다." },
  { id: 9, name: "석궁", attack: 14, accuracy: 10, type: "원거리", description: "정확도가 높은 석궁입니다." },
  { id: 10, name: "도끼", attack: 16, critChance: 10, type: "근접", description: "치명타 확률이 높은 도끼입니다." },
  { id: 11, name: "완드", attack: 12, mpRegen: 2, type: "마법", description: "마법 공격과 함께 MP를 회복시켜주는 완드입니다." },
  { id: 12, name: "채찍", attack: 11, range: 3, type: "근접", description: "넓은 범위를 공격할 수 있는 채찍입니다." },
  { id: 13, name: "방패", attack: 5, defense: 10, type: "방어구", description: "방어력을 크게 높여주는 방패입니다." },
  { id: 14, name: "마법 검", attack: 17, type: "마법/근접", description: "마법과 근접 공격을 모두 사용할 수 있는 검입니다." },
  { id: 15, name: "쌍검", attack: 14, speed: 3, type: "근접", description: "두 자루의 검으로 빠르게 공격합니다." }
];

var skillPool = [
  { id: 1, name: "파이어볼", mpCost: 10, damage: 20, description: "적에게 화염 데미지를 입힙니다." },
  { id: 2, name: "아이스 애로우", mpCost: 15, damage: 25, description: "적을 얼려 데미지를 입힙니다." },
  { id: 3, name: "힐", mpCost: 20, heal: 30, description: "HP를 회복합니다." },
  { id: 4, name: "번개 강타", mpCost: 25, damage: 35, description: "강력한 번개로 적을 공격합니다." },
  { id: 5, name: "방어 태세", mpCost: 15, effect: "defense", value: 10, duration: 3, description: "일시적으로 방어력을 높입니다." },
  { id: 6, name: "독 안개", mpCost: 20, damage: 10, duration: 3, description: "적에게 지속 데미지를 입힙니다." },
  { id: 7, name: "광역 회복", mpCost: 30, heal: 20, aoe: true, description: "파티 전체의 HP를 회복합니다." },
  { id: 8, name: "버서크", mpCost: 35, effect: "attack", value: 15, duration: 3, description: "일시적으로 공격력을 높입니다." },
  { id: 9, name: "그림자 은신", mpCost: 25, effect: "evasion", value: 50, duration: 2, description: "적의 공격을 회피할 확률이 높아집니다." },
  { id: 10, name: "정신 집중", mpCost: 20, effect: "mpRegen", value: 10, duration: 3, description: "일정 시간 동안 MP를 회복합니다." }
];

var monsters = [
  { name: "고블린", hp: 50, maxHp: 50, attack: 5, exp: 20, gold: 30 },
  { name: "오크", hp: 80, maxHp: 80, attack: 8, exp: 35, gold: 45 },
  { name: "트롤", hp: 120, maxHp: 120, attack: 12, exp: 50, gold: 60 },
  { name: "드래곤", hp: 200, maxHp: 200, attack: 20, exp: 100, gold: 150 }
];

var currentMonster = null;

var dungeon = {
  currentFloor: 0,
  maxFloor: 5,
  monstersPerFloor: 3,
  currentMonsterCount: 0
};

var npc = {
  name: "마을 주민",
  dialogue: "안녕하세요, 용사님! 마을을 구해주세요."
};

// 메인 함수
function response(room, msg, sender, isGroupChat, replier, imageDB, packageName) {
  if (msg.startsWith("!")) {
    var command = msg.slice(1).split(" ");
    switch (command[0]) {
      case "시작":
        replier.reply("RPG 게임을 시작합니다. !도움 을 입력하여 명령어를 확인하세요.");
        break;
      case "상태":
        replier.reply(getPlayerStatus());
        break;
      case "공격":
        replier.reply(attackMonster());
        break;
      case "스킬":
        replier.reply(useSkill(command[1]));
        break;
      case "대화":
        replier.reply(talkToNPC());
        break;
      case "퀘스트":
        replier.reply(showQuests());
        break;
      case "퀘스트수락":
        replier.reply(acceptQuest(parseInt(command[1])));
        break;
      case "인벤토리":
        replier.reply(showInventory());
        break;
      case "아이템사용":
        replier.reply(useItem(command[1]));
        break;
      case "무기목록":
        replier.reply(listWeapons());
        break;
      case "무기장착":
        replier.reply(equipWeapon(command[1]));
        break;
      case "스킬뽑기":
        replier.reply(drawSkill());
        break;
      case "던전입장":
        replier.reply(enterDungeon());
        break;
      case "탐험":
        replier.reply(exploreDungeon());
        break;
      case "도움":
        replier.reply(getHelp());
        break;
      default:
        replier.reply("알 수 없는 명령어입니다. !도움 을 입력하여 명령어를 확인하세요.");
    }
  }
}

// 플레이어 상태 확인
function getPlayerStatus() {
  return player.name + "의 상태\n레벨: " + player.level + "\n경험치: " + player.exp +
    "\nHP: " + player.hp + "/" + player.maxHp + "\nMP: " + player.mp + "/" + player.maxMp +
    "\n공격력: " + (player.attack + (player.equippedWeapon ? player.equippedWeapon.attack : 0)) +
    "\n방어력: " + player.defense + "\n골드: " + player.gold;
}

// 몬스터 공격
function attackMonster() {
  if (!currentMonster) {
    return "먼저 '!탐험'으로 몬스터를 만나세요.";
  }
  
  var damage = player.attack + (player.equippedWeapon ? player.equippedWeapon.attack : 0);
  currentMonster.hp -= damage;
  var result = player.name + "가 " + currentMonster.name + "을 공격했습니다. (" + damage + " 데미지)\n";
  result += currentMonster.name + "의 남은 HP: " + currentMonster.hp + "/" + currentMonster.maxHp + "\n";
  
  if (currentMonster.hp <= 0) {
    result += currentMonster.name + "을 물리쳤습니다!\n";
    player.exp += currentMonster.exp;
    player.gold += currentMonster.gold;
    result += currentMonster.exp + "의 경험치와 " + currentMonster.gold + "골드를 획득했습니다.\n";
    currentMonster = null;
    updateQuestProgress(1, 1); // 퀘스트 진행
    var levelUpMessage = checkLevelUp();
    if (levelUpMessage) result += levelUpMessage;
  } else {
    player.hp -= Math.max(0, currentMonster.attack - player.defense);
    result += currentMonster.name + "의 반격! " + player.name + "의 남은 HP: " + player.hp + "/" + player.maxHp;
  }
  
  return result;
}

// (이전 코드는 그대로 유지)

// 스킬 사용 (이어서)
function useSkill(skillIndex) {
  if (!skillIndex) {
    return listSkills();
  }
  
  var index = parseInt(skillIndex) - 1;
  if (index < 0 || index >= player.skills.length) {
    return "잘못된 스킬 번호입니다.";
  }
  
  var skill = player.skills[index];
  if (player.mp < skill.mpCost) {
    return "MP가 부족합니다.";
  }
  
  player.mp -= skill.mpCost;
  var result = player.name + "가 " + skill.name + "을(를) 사용했습니다!\n";
  
  if (skill.damage) {
    currentMonster.hp -= skill.damage;
    result += currentMonster.name + "에게 " + skill.damage + " 데미지를 입혔습니다.\n";
    result += currentMonster.name + "의 남은 HP: " + currentMonster.hp + "/" + currentMonster.maxHp;
    if (currentMonster.hp <= 0) {
      result += "\n" + currentMonster.name + "을 물리쳤습니다!";
      updateQuestProgress(1, 1);
      currentMonster = null;
    }
  } else if (skill.heal) {
    var healAmount = skill.aoe ? Math.floor(skill.heal / 2) : skill.heal;
    player.hp = Math.min(player.maxHp, player.hp + healAmount);
    result += player.name + "의 HP가 " + healAmount + " 회복되었습니다.\n";
    result += "현재 HP: " + player.hp + "/" + player.maxHp;
    if (skill.aoe) {
      result += "\n파티 전체에 회복 효과가 적용되었습니다.";
    }
  } else if (skill.effect) {
    player[skill.effect] += skill.value;
    result += player.name + "의 " + skill.effect + "가 " + skill.value + " 증가했습니다. (지속시간: " + skill.duration + "턴)";
  }
  
  return result;
}

// 스킬 목록 표시
function listSkills() {
  if (player.skills.length === 0) {
    return "습득한 스킬이 없습니다.";
  }
  var skillList = "사용 가능한 스킬:\n";
  for (var i = 0; i < player.skills.length; i++) {
    var skill = player.skills[i];
    skillList += (i + 1) + ". " + skill.name + " (MP " + skill.mpCost + ") - " + skill.description + "\n";
  }
  return skillList + "스킬을 사용하려면 !스킬 [번호] 를 입력하세요.";
}

// NPC와 대화
function talkToNPC() {
  return npc.name + ": " + npc.dialogue;
}

// 퀘스트 표시
function showQuests() {
  var questList = "현재 퀘스트:\n";
  for (var i = 0; i < quests.length; i++) {
    var quest = quests[i];
    questList += (i + 1) + ". " + quest.name + " - " + quest.description + 
      " (" + quest.progress + "/" + quest.target + ")\n";
  }
  return questList;
}

// 퀘스트 진행 업데이트
function updateQuestProgress(questId, amount) {
  var quest = quests.find(q => q.id === questId);
  if (quest) {
    quest.progress += amount;
    if (quest.progress >= quest.target) {
      player.gold += quest.reward;
      return quest.name + " 퀘스트를 완료했습니다! " + quest.reward + " 골드를 획득했습니다.";
    }
  }
  return "";
}

// 새로운 퀘스트 수락
function acceptQuest(questId) {
  var quest = quests.find(q => q.id === questId);
  if (quest) {
    if (quest.progress === 0) {
      quest.progress = 0;
      return quest.name + " 퀘스트를 수락했습니다. 목표: " + quest.description;
    } else {
      return "이미 진행 중인 퀘스트입니다.";
    }
  }
  return "해당 퀘스트를 찾을 수 없습니다.";
}

// 인벤토리 표시
function showInventory() {
  if (player.inventory.length === 0) {
    return "인벤토리가 비어있습니다.";
  }
  var inventoryList = "인벤토리:\n";
  for (var i = 0; i < player.inventory.length; i++) {
    inventoryList += (i + 1) + ". " + player.inventory[i].name + "\n";
  }
  return inventoryList + "아이템을 사용하려면 !아이템사용 [번호] 를 입력하세요.";
}

// 아이템 사용
function useItem(itemIndex) {
  var index = parseInt(itemIndex) - 1;
  if (index < 0 || index >= player.inventory.length) {
    return "잘못된 아이템 번호입니다.";
  }
  
  var item = player.inventory[index];
  var result = player.name + "가 " + item.name + "을(를) 사용했습니다.\n";
  
  switch (item.effect) {
    case "hp":
      player.hp = Math.min(player.maxHp, player.hp + item.value);
      result += "HP가 " + item.value + " 회복되었습니다.";
      break;
    case "mp":
      player.mp = Math.min(player.maxMp, player.mp + item.value);
      result += "MP가 " + item.value + " 회복되었습니다.";
      break;
    case "gold":
      player.gold += item.value;
      result += item.value + " 골드를 획득했습니다.";
      break;
    case "exp":
      player.exp += item.value;
      result += item.value + " 경험치를 획득했습니다.";
      var levelUpMessage = checkLevelUp();
      if (levelUpMessage) result += "\n" + levelUpMessage;
      break;
    // 다른 효과들에 대한 처리...
  }
  
  player.inventory.splice(index, 1);
  return result;
}

// 무기 목록 표시
function listWeapons() {
  var weaponList = "사용 가능한 무기:\n";
  for (var i = 0; i < weapons.length; i++) {
    var weapon = weapons[i];
    weaponList += weapon.id + ". " + weapon.name + " (공격력: " + weapon.attack + ", 타입: " + weapon.type + ")\n";
    weaponList += "   " + weapon.description + "\n";
  }
  return weaponList + "무기를 장착하려면 !무기장착 [번호] 를 입력하세요.";
}

// 무기 장착
function equipWeapon(weaponId) {
  var weapon = weapons.find(w => w.id === parseInt(weaponId));
  if (!weapon) {
    return "잘못된 무기 번호입니다.";
  }
  
  player.equippedWeapon = weapon;
  var result = weapon.name + "을(를) 장착했습니다.\n";
  result += "공격력이 " + weapon.attack + " 증가했습니다.";
  
  if (weapon.speed) result += "\n공격 속도가 " + weapon.speed + " 증가했습니다.";
  if (weapon.mpBoost) {
    player.maxMp += weapon.mpBoost;
    result += "\n최대 MP가 " + weapon.mpBoost + " 증가했습니다.";
  }
  if (weapon.range) result += "\n공격 범위가 " + weapon.range + "로 설정되었습니다.";
  if (weapon.accuracy) result += "\n명중률이 " + weapon.accuracy + "% 증가했습니다.";
  if (weapon.critChance) result += "\n치명타 확률이 " + weapon.critChance + "% 증가했습니다.";
  if (weapon.mpRegen) result += "\n전투 시 MP를 " + weapon.mpRegen + "씩 회복합니다.";
  if (weapon.defense) {
    player.defense += weapon.defense;
    result += "\n방어력이 " + weapon.defense + " 증가했습니다.";
  }
  
  return result;
}

// 스킬 뽑기
function drawSkill() {
  if (player.gold < 100) {
    return "스킬을 뽑기 위해서는 100 골드가 필요합니다.";
  }
  
  player.gold -= 100;
  var randomSkill = skillPool[Math.floor(Math.random() * skillPool.length)];
  player.skills.push(randomSkill);
  return randomSkill.name + " 스킬을 획득했습니다!";
}

// 던전 입장
function enterDungeon() {
  if (dungeon.currentFloor === 0) {
    dungeon.currentFloor = 1;
    dungeon.currentMonsterCount = 0;
    return "던전 1층에 입장했습니다. '!탐험'으로 몬스터와 조우할 수 있습니다.";
  } else {
    return "이미 던전에 있습니다. 현재 " + dungeon.currentFloor + "층입니다.";
  }
}

// 던전 탐험
function exploreDungeon() {
  if (dungeon.currentFloor === 0) {
    return "먼저 '!던전입장'으로 던전에 입장해야 합니다.";
  }
  
  if (dungeon.currentMonsterCount >= dungeon.monstersPerFloor) {
    dungeon.currentFloor++;
    dungeon.currentMonsterCount = 0;
    if (dungeon.currentFloor > dungeon.maxFloor) {
      dungeon.currentFloor = 0;
      return "축하합니다! 던전의 모든 층을 클리어했습니다!";
    }
    return dungeon.currentFloor + "층으로 올라갔습니다. '!탐험'으로 계속 진행하세요.";
  }
  
  var monsterIndex = Math.min(Math.floor(Math.random() * monsters.length), dungeon.currentFloor - 1);
  currentMonster = Object.assign({}, monsters[monsterIndex]);
  dungeon.currentMonsterCount++;
  
  return currentMonster.name + "을(를) 만났습니다!\n" +
    "몬스터 HP: " + currentMonster.hp + "/" + currentMonster.maxHp + "\n" +
    "'!공격' 또는 '!스킬'로 전투를 시작하세요.";
}

// 레벨업 체크
function checkLevelUp() {
  var expNeeded = player.level * 100;
  if (player.exp >= expNeeded) {
    player.level++;
    player.exp -= expNeeded;
    player.maxHp += 10;
    player.maxMp += 5;
    player.attack += 2;
    player.defense += 1;
    player.hp = player.maxHp;
    player.mp = player.maxMp;
    return player.name + "의 레벨이 " + player.level + "로 올랐습니다!";
  }
  return "";
}

// 도움말
function getHelp() {
  return "사용 가능한 명령어:\n" +
    "!시작 - 게임 시작\n" +
    "!상태 - 플레이어 상태 확인\n" +
    "!공격 - 몬스터 공격\n" +
    "!스킬 - 스킬 목록 확인\n" +
    "!스킬 [번호] - 스킬 사용\n" +
    "!대화 - NPC와 대화\n" +
    "!퀘스트 - 퀘스트 목록 확인\n" +
    "!퀘스트수락 [번호] - 새로운 퀘스트 수락\n" +
    "!인벤토리 - 인벤토리 확인\n" +
    "!아이템사용 [번호] - 아이템 사용\n" +
    "!무기목록 - 사용 가능한 무기 목록을 봅니다.\n" +
    "!무기장착 [번호] - 선택한 무기를 장착합니다.\n" +
    "!스킬뽑기 - 새로운 스킬 획득 (100 골드)\n" +
    "!던전입장 - 던전에 입장합니다.\n" +
    "!탐험 - 던전을 탐험하고 몬스터와 조우합니다.\n" +
    "!도움 - 도움말 보기";
}
