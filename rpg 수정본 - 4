const FS = FileStream;
let path = "/sdcard/RPG게임";
let users = {};

// 사용자 데이터 파일 저장
function saveUserData() {
    let data = JSON.stringify(users, null, 4); // 데이터를 JSON 형식으로 변환
    FS.write(path, data); // 파일에 데이터 저장
}

// 사용자 데이터 파일 로드
function loadUserData() {
    if (!FS.read(path)) { // 파일이 존재하지 않으면
        users = {}; // 기본값으로 설정
    } else {
        let data = FS.read(path); // 파일 읽기
        users = JSON.parse(data); // 데이터를 JavaScript 객체로 변환
    }
}

// 전역 변수 및 객체 선언
var player = {
name: "용사",
level: 1,
exp: 0,
hp: 100,
maxHp: 100,
mp: 50,
maxMp: 50,
attack: 10,
defense: 5,
gold: 0,
inventory: [],
equippedWeapon: null,
skills: []
};

var quests = [
{ id: 1, name: "고블린 퇴치", description: "고블린 5마리 처치", target: 5, progress: 0, reward: 100 },
{ id: 2, name: "보물 찾기", description: "숨겨진 보물 상자 찾기", target: 1, progress: 0, reward: 200 },
{ id: 3, name: "약초 수집", description: "희귀 약초 3개 수집", target: 3, progress: 0, reward: 150 },
{ id: 4, name: "늑대 사냥", description: "위험한 늑대 3마리 처치", target: 3, progress: 0, reward: 250 },
{ id: 5, name: "마을 순찰", description: "마을 주변 10바퀴 순찰", target: 10, progress: 0, reward: 120 },
{ id: 6, name: "던전 탐험", description: "깊은 던전 3층까지 탐험", target: 3, progress: 0, reward: 300 },
{ id: 7, name: "요리 대회", description: "특별한 요리 5개 만들기", target: 5, progress: 0, reward: 180 },
{ id: 8, name: "유령 퇴치", description: "마을을 떠도는 유령 3마리 퇴치", target: 3, progress: 0, reward: 280 }
];

var weapons = [
{ id: 1, name: "목검", attack: 5, type: "근접", description: "기본적인 나무 검입니다." },
{ id: 2, name: "철검", attack: 10, type: "근접", description: "튼튼한 철로 만든 검입니다." },
{ id: 3, name: "마법 지팡이", attack: 15, type: "마법", mpBoost: 20, description: "마법 공격력을 높여주는 지팡이입니다." },
{ id: 4, name: "장궁", attack: 12, type: "원거리", accuracy: 10, description: "멀리 있는 적을 공격할 수 있는 활입니다." },
{ id: 5, name: "대검", attack: 18, type: "근접", critChance: 5, description: "무겁지만 강력한 대형 검입니다." },
{ id: 6, name: "단검", attack: 8, type: "근접", speed: 2, description: "빠르게 공격할 수 있는 작은 칼입니다." },
{ id: 7, name: "마법 서적", attack: 20, type: "마법", mpBoost: 30, mpRegen: 2, description: "마법 공격력과 MP를 높여주는 책입니다." },
{ id: 8, name: "창", attack: 15, type: "근접", range: 2, description: "긴 범위로 공격할 수 있는 창입니다." },
{ id: 9, name: "석궁", attack: 14, type: "원거리", accuracy: 15, critChance: 8, description: "정확도와 치명타 확률이 높은 석궁입니다." },
{ id: 10, name: "도끼", attack: 16, type: "근접", critChance: 10, description: "치명타 확률이 높은 도끼입니다." },
{ id: 11, name: "완드", attack: 12, type: "마법", mpRegen: 3, description: "마법 공격과 함께 MP를 회복시켜주는 완드입니다." },
{ id: 12, name: "채찍", attack: 11, type: "근접", range: 3, speed: 1, description: "넓은 범위를 빠르게 공격할 수 있는 채찍입니다." },
{ id: 13, name: "방패", attack: 5, type: "방어구", defense: 10, description: "방어력을 크게 높여주는 방패입니다." },
{ id: 14, name: "마법 검", attack: 17, type: "마법/근접", mpBoost: 15, description: "마법과 근접 공격을 모두 사용할 수 있는 검입니다." },
{ id: 15, name: "쌍검", attack: 14, type: "근접", speed: 3, critChance: 7, description: "두 자루의 검으로 빠르게 공격합니다." },
{ id: 16, name: "성스러운 망치", attack: 22, type: "근접", mpBoost: 10, heal: 5, description: "강력한 공격력과 함께 사용자를 조금씩 치유합니다." },
{ id: 17, name: "마법 활", attack: 16, type: "원거리/마법", accuracy: 12, mpBoost: 15, description: "마법의 힘이 깃든 화살을 발사합니다." },
{ id: 18, name: "룬 검", attack: 19, type: "근접/마법", mpRegen: 2, critChance: 6, description: "룬의 힘으로 강화된 검으로, 마법 친화적입니다." },
{ id: 19, name: "흡혈 단검", attack: 13, type: "근접", lifeSteal: 10, speed: 2, description: "적의 생명력을 흡수하는 단검입니다." },
{ id: 20, name: "천둥 망치", attack: 25, type: "근접/마법", mpCost: 5, description: "강력한 번개의 힘이 깃든 망치입니다. 사용 시 MP를 소모합니다." }
];

var skillPool = [
{ id: 1, name: "파이어볼", mpCost: 10, damage: 20, type: "마법", description: "적에게 화염 데미지를 입힙니다." },
{ id: 2, name: "아이스 애로우", mpCost: 15, damage: 25, type: "마법", description: "적을 얼려 데미지를 입힙니다." },
{ id: 3, name: "힐", mpCost: 20, heal: 30, type: "마법", description: "HP를 회복합니다." },
{ id: 4, name: "번개 강타", mpCost: 25, damage: 35, type: "마법", description: "강력한 번개로 적을 공격합니다." },
{ id: 5, name: "방어 태세", mpCost: 15, effect: "defense", value: 10, duration: 3, type: "버프", description: "일시적으로 방어력을 높입니다." },
{ id: 6, name: "독 안개", mpCost: 20, damage: 10, duration: 3, type: "마법", description: "적에게 지속 데미지를 입힙니다." },
{ id: 7, name: "광역 회복", mpCost: 30, heal: 20, aoe: true, type: "마법", description: "파티 전체의 HP를 회복합니다." },
{ id: 8, name: "버서크", mpCost: 35, effect: "attack", value: 15, duration: 3, type: "버프", description: "일시적으로 공격력을 높입니다." },
{ id: 9, name: "그림자 은신", mpCost: 25, effect: "evasion", value: 50, duration: 2, type: "버프", description: "적의 공격을 회피할 확률이 높아집니다." },
{ id: 10, name: "정신 집중", mpCost: 20, effect: "mpRegen", value: 10, duration: 3, type: "버프", description: "일정 시간 동안 MP를 회복합니다." },
{ id: 11, name: "대지 진동", mpCost: 40, damage: 45, aoe: true, type: "마법", description: "모든 적에게 데미지를 입힙니다." },
{ id: 12, name: "신성한 일격", mpCost: 50, damage: 60, type: "물리", description: "강력한 물리 공격을 가합니다." },
{ id: 13, name: "생명력 흡수", mpCost: 30, damage: 25, heal: 15, type: "마법", description: "적에게 데미지를 입히고 HP를 회복합니다." },
{ id: 14, name: "시간 가속", mpCost: 45, effect: "speed", value: 20, duration: 3, type: "버프", description: "일시적으로 행동 속도를 높입니다." },
{ id: 15, name: "원소 폭발", mpCost: 60, damage: 70, type: "마법", description: "모든 원소의 힘을 모아 강력한 공격을 가합니다." }
];

var runes = [
    { id: 1, name: "화염의 룬", effect: "fireDamage", value: 10, description: "화염 데미지를 10 증가시킵니다." },
    { id: 2, name: "빙결의 룬", effect: "iceDamage", value: 10, description: "빙결 데미지를 10 증가시킵니다." },
    { id: 3, name: "번개의 룬", effect: "lightningDamage", value: 10, description: "번개 데미지를 10 증가시킵니다." },
    { id: 4, name: "생명의 룬", effect: "heal", value: 5, description: "매 턴마다 5의 HP를 회복합니다." },
    { id: 5, name: "마나의 룬", effect: "mpRegen", value: 3, description: "매 턴마다 3의 MP를 회복합니다." },
    { id: 6, name: "속도의 룬", effect: "speed", value: 1, description: "공격 속도를 1 증가시킵니다." },
    { id: 7, name: "힘의 룬", effect: "attack", value: 5, description: "공격력을 5 증가시킵니다." },
    { id: 8, name: "방어의 룬", effect: "defense", value: 5, description: "방어력을 5 증가시킵니다." },
    { id: 9, name: "흡혈의 룬", effect: "lifeSteal", value: 5, description: "공격 시 데미지의 5%를 생명력으로 흡수합니다." },
    { id: 10, name: "정확의 룬", effect: "accuracy", value: 5, description: "명중률을 5% 증가시킵니다." }
];

var growthWeapons = [
    { id: 1, name: "견습 검", baseAttack: 10, exp: 0, level: 1, maxLevel: 10 },
    { id: 2, name: "견습 지팡이", baseAttack: 8, exp: 0, level: 1, maxLevel: 10 },
    { id: 3, name: "견습 활", baseAttack: 9, exp: 0, level: 1, maxLevel: 10 }
];

var shopItems = [
    { id: 1, name: "체력 포션", effect: "hp", value: 50, price: 100 },
    { id: 2, name: "마나 포션", effect: "mp", value: 30, price: 80 },
    { id: 3, name: "강화 주문서", effect: "enhance", value: 1, price: 500 },
    { id: 4, name: "텔레포트 스크롤", effect: "teleport", value: 1, price: 300 }
];


var monsters = [
{ name: "고블린", hp: 50, maxHp: 50, attack: 5, exp: 20, gold: 100 },
{ name: "오크", hp: 80, maxHp: 80, attack: 8, exp: 35, gold: 240 },
{ name: "트롤", hp: 120, maxHp: 120, attack: 12, exp: 50, gold: 370 },
{ name: "드래곤", hp: 200, maxHp: 200, attack: 20, exp: 100, gold: 420 }
];

var currentMonster = null;

var dungeon = {
currentFloor: 0,
maxFloor: 5,
monstersPerFloor: 3,
currentMonsterCount: 0
};

var events = [
    { id: 1, name: "보물 상자 발견", effect: function() {
        var gold = Math.floor(Math.random() * 100) + 50;
        player.gold += gold;
        return gold + " 골드를 발견했습니다!";
    }},
    { id: 2, name: "신비한 샘", effect: function() {
        player.hp = player.maxHp;
        player.mp = player.maxMp;
        return "체력과 마나가 모두 회복되었습니다!";
    }},
    { id: 3, name: "함정", effect: function() {
        var damage = Math.floor(player.maxHp * 0.2);
        player.hp -= damage;
        return "함정에 빠져 " + damage + "의 데미지를 입었습니다.";
    }}
];

// 맵 정의
var maps = [
    { id: 1, name: "초원", monsters: ["늑대", "고블린", "슬라임"], minLevel: 1, maxLevel: 5 },
    { id: 2, name: "숲", monsters: ["오크", "트롤", "거미"], minLevel: 5, maxLevel: 10 },
    { id: 3, name: "동굴", monsters: ["박쥐", "골렘", "오우거"], minLevel: 10, maxLevel: 15 },
    { id: 4, name: "설산", monsters: ["설인", "얼음 골렘", "눈표범"], minLevel: 15, maxLevel: 20 },
    { id: 5, name: "화산", monsters: ["화염 골렘", "용암 뱀", "불꽃 정령"], minLevel: 20, maxLevel: 25 }
];


// 메인 함수
function response(room, msg, sender, isGroupChat, replier, imageDB, packageName) {
    if (msg.startsWith("!")) {
        var command = msg.slice(1).split(" ");
        switch (command[0]) {
            case "시작":
                replier.reply('반가워요 용사님!\n시작방법 -> !도움');
                break;
            case "상태":
                replier.reply(getPlayerStatus());
                break;
            case "공격":
                replier.reply(attackMonster());
                break;
            case "스킬":
                replier.reply(useSkill(command[1]));
                break;
            case "대화":
                replier.reply(talkToNPC());
                break;
            case "퀘스트":
                replier.reply(showQuests());
                break;
            case "퀘스트수락":
                replier.reply(acceptQuest(parseInt(command[1])));
                break;
            case "인벤토리":
                replier.reply(showInventory());
                break;
            case "아이템사용":
                replier.reply(useItem(command[1]));
                break;
            case "무기목록":
                replier.reply(listWeapons());
                break;
            case "무기장착":
                replier.reply(equipWeapon(command[1]));
                break;
            case "스킬뽑기":
                replier.reply(drawSkill());
                break;
            case "무기뽑기":
                replier.reply(drawWeapon());
                break;
            case "던전입장":
                replier.reply(enterDungeon());
                break;
            case "탐험":
                replier.reply(exploreDungeon());
                break;
            case "룬장착":
                replier.reply(equipRune(parseInt(command[1]), parseInt(command[2]), parseInt(command[3]) - 1));
                break;
            case "무기각성":
                replier.reply(awakenWeapon(parseInt(command[1])));
                break;
            case "룬뽑기":
                replier.reply(drawRune());
                break;
            case "도움":
                replier.reply(getHelp());
                break;
            case "레이드시작":
                replier.reply(startBossRaid(parseInt(command[1])));
                break;
            case "레이드공격":
                replier.reply(attackRaidBoss());
                break;
           case "직업목록":
                replier.reply(showJobs());
                break;
            case "직업선택":
                replier.reply(selectJob(parseInt(command[1])));
                break;
            case "상점":
                replier.reply(showShop());
                break;
            case "구매":
                replier.reply(buyItem(parseInt(command[1])));
                break;
            case "이벤트":
                replier.reply(triggerRandomEvent());
                break;
            case "성장무기":
                replier.reply(showGrowthWeapons());
                break;
            case "무기강화":
                replier.reply(addExpToWeapon(parseInt(command[1]), parseInt(command[2])));
            case "맵":
                replier.reply(showMaps());
                break;
            case "이동":
                replier.reply(moveToMap(parseInt(command[1])));
                break;
            case "사냥":
                replier.reply(hunt());
                break;
        }
    }
}

// 현재 맵
var currentMap = null;

// 맵 이동 함수
function moveToMap(mapId) {
    var map = maps.find(function(m) { return m.id === mapId; });
    if (!map) {
        return "존재하지 않는 맵입니다.";
    }
    if (player.level < map.minLevel) {
        return "이 맵에 입장하기 위해서는 레벨 " + map.minLevel + " 이상이 필요합니다.";
    }
    currentMap = map;
    return map.name + "으로 이동했습니다. '!사냥'으로 몬스터와 전투를 시작할 수 있습니다.";
}

// 맵 목록 표시 함수
function showMaps() {
    var mapList = "사용 가능한 맵:\n";
    for (var i = 0; i < maps.length; i++) {
        var map = maps[i];
        mapList += map.id + ". " + map.name + " (레벨 " + map.minLevel + " ~ " + map.maxLevel + ")\n";
    }
    return mapList + "맵으로 이동하려면 '!이동 [맵번호]'를 입력하세요.";
}

// 사냥 함수
function hunt() {
    if (!currentMap) {
        return "먼저 '!이동 [맵번호]'로 맵을 선택해주세요.";
    }
    var monsterName = currentMap.monsters[Math.floor(Math.random() * currentMap.monsters.length)];
    var monsterLevel = Math.floor(Math.random() * (currentMap.maxLevel - currentMap.minLevel + 1)) + currentMap.minLevel;
    
    currentMonster = {
        name: monsterName,
        level: monsterLevel,
        hp: monsterLevel * 20,
        maxHp: monsterLevel * 20,
        attack: monsterLevel * 5,
        exp: monsterLevel * 10,
        gold: monsterLevel * 5
    };
    
    return monsterName + " (레벨 " + monsterLevel + ")을(를) 만났습니다!\n" +
           "몬스터 HP: " + currentMonster.hp + "/" + currentMonster.maxHp + "\n" +
           "'!공격'으로 전투를 시작하세요.";
}

// 전리품 획득 함수
function getLoot() {
    var lootChance = Math.random();
    if (lootChance < 0.1) { // 10% 확률로 무기 획득
        var randomWeapon = weapons[Math.floor(Math.random() * weapons.length)];
        player.inventory.push(randomWeapon);
        return randomWeapon.name + "을(를) 획득했습니다!";
    } else if (lootChance < 0.3) { // 20% 확률로 포션 획득
        var potion = { name: "체력 포션", effect: "hp", value: 50 };
        player.inventory.push(potion);
        return "체력 포션을 획득했습니다!";
    }
    return ""; // 70% 확률로 아무것도 얻지 못함
}


function triggerRandomEvent() {
    var event = events[Math.floor(Math.random() * events.length)];
    return "이벤트 발생: " + event.name + "\n" + event.effect();
}

function addExpToWeapon(weaponId, expGained) {
    var weapon = player.inventory.find(function(item) { return item.id === weaponId && item.exp !== undefined; });
    if (!weapon) {
        return "해당 무기를 찾을 수 없습니다.";
    }
    weapon.exp += expGained;
    var levelUpMessage = "";
    while (weapon.exp >= weapon.level * 100 && weapon.level < weapon.maxLevel) {
        weapon.level++;
        weapon.baseAttack += 2;
        levelUpMessage += weapon.name + "의 레벨이 " + weapon.level + "로 올랐습니다!\n";
    }
    return levelUpMessage || weapon.name + "에 " + expGained + " 경험치를 추가했습니다.";
}

function showGrowthWeapons() {
    var weaponList = "성장형 무기:\n";
    for (var i = 0; i < player.inventory.length; i++) {
        var weapon = player.inventory[i];
        if (weapon.exp !== undefined) {
            weaponList += weapon.name + " (레벨: " + weapon.level + ", 공격력: " + weapon.baseAttack + ", 경험치: " + weapon.exp + "/" + (weapon.level * 100) + ")\n";
        }
    }
    return weaponList;
}

// 무기 객체에 룬 슬롯 추가
weapons.forEach(weapon => {
    weapon.runeSlots = new Array(3).fill(null);
    weapon.awakening = 0;
});

// 룬 장착 함수
function equipRune(weaponId, runeId, slotIndex) {
    var weapon = weapons.find(w => w.id === weaponId);
    var rune = runes.find(r => r.id === runeId);
    
    if (!weapon || !rune || slotIndex < 0 || slotIndex >= weapon.runeSlots.length) {
        return "잘못된 무기 ID, 룬 ID 또는 슬롯 인덱스입니다.";
    }
    
    weapon.runeSlots[slotIndex] = rune;
    return weapon.name + "의 " + (slotIndex + 1) + "번 슬롯에 " + rune.name + "을(를) 장착했습니다.";
}

// 룬 효과 적용 함수 (ES5 버전)
function applyRuneEffects(weapon, baseStats) {
    var stats = {};
    for (var key in baseStats) {
        if (baseStats.hasOwnProperty(key)) {
            stats[key] = baseStats[key];
        }
    }

    for (var i = 0; i < weapon.runeSlots.length; i++) {
        var rune = weapon.runeSlots[i];
        if (rune) {
            if (stats.hasOwnProperty(rune.effect)) {
                stats[rune.effect] += rune.value;
            } else {
                stats[rune.effect] = rune.value;
            }
        }
    }
    return stats;
}

function showShop() {
    var itemList = "상점 아이템:\n";
    for (var i = 0; i < shopItems.length; i++) {
        var item = shopItems[i];
        itemList += item.id + ". " + item.name + " (" + item.price + " 골드)\n";
    }
    return itemList + "아이템을 구매하려면 '!구매 [아이템번호]'를 입력하세요.";
}

function buyItem(itemId) {
    var item = shopItems.find(function(i) { return i.id === itemId; });
    if (!item) {
        return "잘못된 아이템 번호입니다.";
    }
    if (player.gold < item.price) {
        return "골드가 부족합니다.";
    }
    player.gold -= item.price;
    player.inventory.push(item);
    return item.name + "을(를) 구매했습니다.";
}

// 플레이어 상태 확인
function getPlayerStatus() {
return player.name + "의 상태\n레벨: " + player.level + "\n경험치: " + player.exp +
"\nHP: " + player.hp + "/" + player.maxHp + "\nMP: " + player.mp + "/" + player.maxMp +
"\n공격력: " + (player.attack + (player.equippedWeapon ? player.equippedWeapon.attack : 0)) +
"\n방어력: " + player.defense + "\n골드: " + player.gold;
}

// 스킬 목록 표시
function listSkills() {
if (player.skills.length === 0) {
return "습득한 스킬이 없습니다.";
}
var skillList = "사용 가능한 스킬:\n";
for (var i = 0; i < player.skills.length; i++) {
var skill = player.skills[i];
skillList += (i + 1) + ". " + skill.name + " (MP " + skill.mpCost + ") - " + skill.description + "\n";
}

// 스킬 목록 표시 (이어서)
return skillList + "스킬을 사용하려면 !스킬 [번호] 를 입력하세요.";
}

// 퀘스트 표시
function showQuests() {
var questList = "현재 퀘스트:\n";
for (var i = 0; i < quests.length; i++) {
var quest = quests[i];
questList += (i + 1) + ". " + quest.name + " - " + quest.description +
" (" + quest.progress + "/" + quest.target + ")\n";
}
return questList;
}

// 퀘스트 진행 업데이트
function updateQuestProgress(questId, amount) {
var quest = quests.find(q => q.id === questId);
if (quest) {
quest.progress += amount;
if (quest.progress >= quest.target) {
player.gold += quest.reward;
return quest.name + " 퀘스트를 완료했습니다! " + quest.reward + " 골드를 획득했습니다.";
}
}
return "";
}

// 새로운 퀘스트 수락
function acceptQuest(questId) {
var quest = quests.find(q => q.id === questId);
if (quest) {
if (quest.progress === 0) {
quest.progress = 0;
return quest.name + " 퀘스트를 수락했습니다. 목표: " + quest.description;
} else {
return "이미 진행 중인 퀘스트입니다.";
}
}
return "해당 퀘스트를 찾을 수 없습니다.";
}

// 인벤토리 표시
function showInventory() {
if (player.inventory.length === 0) {
return "인벤토리가 비어있습니다.";
}
var inventoryList = "인벤토리:\n";
for (var i = 0; i < player.inventory.length; i++) {
inventoryList += (i + 1) + ". " + player.inventory[i].name + "\n";
}
return inventoryList + "아이템을 사용하려면 !아이템사용 [번호] 를 입력하세요.";
}

// 아이템 사용
function useItem(itemIndex) {
var index = parseInt(itemIndex) - 1;
if (index < 0 || index >= player.inventory.length) {
return "잘못된 아이템 번호입니다.";
}

var item = player.inventory[index];
var result = player.name + "가 " + item.name + "을(를) 사용했습니다.\n";


}



// 무기 목록 표시
function listWeapons() {
var weaponList = "사용 가능한 무기:\n";
for (var i = 0; i < weapons.length; i++) {
var weapon = weapons[i];
weaponList += weapon.id + ". " + weapon.name + " (공격력: " + weapon.attack + ", 타입: " + weapon.type + ")\n";
weaponList += " " + weapon.description + "\n";
}
return weaponList + "무기를 장착하려면 !무기장착 [번호] 를 입력하세요.";
}

// 무기 장착 함수 수정
function equipWeapon(weaponId) {
var weapon = weapons.find(w => w.id === parseInt(weaponId));
if (!weapon) {
return "잘못된 무기 번호입니다.";
}

// 이전 무기의 효과 제거
if (player.equippedWeapon) {
if (player.equippedWeapon.mpBoost) player.maxMp -= player.equippedWeapon.mpBoost;
if (player.equippedWeapon.defense) player.defense -= player.equippedWeapon.defense;
}

player.equippedWeapon = weapon;
var result = weapon.name + "을(를) 장착했습니다.\n";
result += "공격력이 " + weapon.attack + " 증가했습니다.";

if (weapon.speed) result += "\n공격 속도가 " + weapon.speed + " 증가했습니다.";
if (weapon.mpBoost) {
player.maxMp += weapon.mpBoost;
result += "\n최대 MP가 " + weapon.mpBoost + " 증가했습니다.";
}
if (weapon.range) result += "\n공격 범위가 " + weapon.range + "로 설정되었습니다.";
if (weapon.accuracy) result += "\n명중률이 " + weapon.accuracy + "% 증가했습니다.";
if (weapon.critChance) result += "\n치명타 확률이 " + weapon.critChance + "% 증가했습니다.";
if (weapon.mpRegen) result += "\n전투 시 MP를 " + weapon.mpRegen + "씩 회복합니다.";
if (weapon.defense) {
player.defense += weapon.defense;
result += "\n방어력이 " + weapon.defense + " 증가했습니다.";
}

return result;
}


// 몬스터 공격
function attackMonster() {
    if (!currentMonster) {
        return "먼저 '!탐험'으로 몬스터를 만나세요.";
    }
    
    var damage = player.attack + (player.equippedWeapon ? player.equippedWeapon.attack : 0);
    currentMonster.hp -= damage;
    var result = player.name + "가 " + currentMonster.name + "을 공격했습니다. (" + damage + " 데미지)\n";
    result += currentMonster.name + "의 남은 HP: " + currentMonster.hp + "/" + currentMonster.maxHp + "\n";
    
    if (currentMonster.hp <= 0) {
        result += currentMonster.name + "을 물리쳤습니다!\n";
        player.exp += currentMonster.exp;
        player.gold += currentMonster.gold;
        result += currentMonster.exp + "의 경험치와 " + currentMonster.gold + "골드를 획득했습니다.\n";
        currentMonster = null;
        updateQuestProgress(1, 1); // 퀘스트 진행
        var levelUpMessage = checkLevelUp();
        if (levelUpMessage) result += levelUpMessage;
    } else {
        player.hp -= Math.max(0, currentMonster.attack - player.defense);
        result += currentMonster.name + "의 반격! " + player.name + "의 남은 HP: " + player.hp + "/" + player.maxHp;
    }

      if (currentMonster.hp <= 0) {
        result += currentMonster.name + "을 물리쳤습니다!\n";
        player.exp += currentMonster.exp;
        player.gold += currentMonster.gold;
        result += currentMonster.exp + "의 경험치와 " + currentMonster.gold + "골드를 획득했습니다.\n";
        
        var loot = getLoot();
        if (loot) {
            result += loot + "\n";
        }
        
        currentMonster = null;
        var levelUpMessage = checkLevelUp();
        if (levelUpMessage) result += levelUpMessage;
    }
  
    return result;
}

    

// 스킬 사용 함수 수정
function useSkill(skillIndex) {
if (!skillIndex) {
return listSkills();
}

var index = parseInt(skillIndex) - 1;
if (index < 0 || index >= player.skills.length) {
return "잘못된 스킬 번호입니다.";
}

var skill = player.skills[index];
if (player.mp < skill.mpCost) {
return "MP가 부족합니다.";
}

player.mp -= skill.mpCost;
var result = player.name + "가 " + skill.name + "을(를) 사용했습니다!\n";

var weapon = player.equippedWeapon;
var damageMultiplier = 1 + (weapon && weapon.type === "마법" ? 0.2 : 0); // 마법 무기는 스킬 데미지 20% 증가

if (skill.damage) {
var damage = Math.round(skill.damage * damageMultiplier);
currentMonster.hp -= damage;
result += currentMonster.name + "에게 " + damage + " 데미지를 입혔습니다.\n";
result += currentMonster.name + "의 남은 HP: " + currentMonster.hp + "/" + currentMonster.maxHp;
if (currentMonster.hp <= 0) {
result += "\n" + currentMonster.name + "을 물리쳤습니다!";
updateQuestProgress(1, 1);
currentMonster = null;
}
} else if (skill.heal) {
var healAmount = Math.round(skill.heal * (1 + (weapon && weapon.type === "마법" ? 0.2 : 0)));
player.hp = Math.min(player.maxHp, player.hp + healAmount);
result += player.name + "의 HP가 " + healAmount + " 회복되었습니다.\n";
result += "현재 HP: " + player.hp + "/" + player.maxHp;
} else if (skill.effect) {
var effectValue = Math.round(skill.value * (1 + (weapon && weapon.type === "마법" ? 0.2 : 0)));
player[skill.effect] += effectValue;
result += player.name + "의 " + skill.effect + "가 " + effectValue + " 증가했습니다. (지속시간: " + skill.duration + "턴)";
}

return result;
}

// 스킬 뽑기
function drawSkill() {
if (player.gold < 100) {
return "스킬을 뽑기 위해서는 100 골드가 필요합니다.";
}

player.gold -= 100;
var randomSkill = skillPool[Math.floor(Math.random() * skillPool.length)];
player.skills.push(randomSkill);
return randomSkill.name + " 스킬을 획득했습니다!";
}

// 무기 뽑기
function drawWeapon() {
if (player.gold < 150) {
return "무기를 뽑기 위해서는 150 골드가 필요합니다.";
}

player.gold -= 150;
var randomWeapon = weapons[Math.floor(Math.random() * weapons.length)];
player.inventory.push(randomWeapon);
return randomWeapon.name + " 무기를 획득했습니다! 인벤토리에서 확인하세요.";
}

// 룬 뽑기
function drawRune() {
    if (player.gold < 100) {
        return "룬을 뽑기 위해서는 100 골드가 필요합니다.";
    }
    
    player.gold -= 100;
    var randomRune = runes[Math.floor(Math.random() * runes.length)];
    player.inventory.push(randomRune);
    return randomRune.name + " 룬을 획득했습니다! 효과: " + randomRune.description;
}

// 무기 각성 함수
function awakenWeapon(weaponId) {
    var weapon = weapons.find(w => w.id === weaponId);
    if (!weapon) {
        return "잘못된 무기 ID입니다.";
    }
    
    if (weapon.awakening >= 5) {
        return weapon.name + "은(는) 이미 최대로 각성되었습니다.";
    }
    
    weapon.awakening++;
    weapon.attack += 5;  // 각성 시 공격력 증가
    
    if (weapon.awakening === 5) {
        // 최대 각성 시 특별한 효과 부여
        weapon.specialEffect = "모든 속성 데미지 10% 증가";
    }
    
    return weapon.name + "이(가) " + weapon.awakening + "단계로 각성되었습니다!";
}

// 던전 입장
function enterDungeon() {
if (dungeon.currentFloor === 0) {
dungeon.currentFloor = 1;
dungeon.currentMonsterCount = 0;
return "던전 1층에 입장했습니다. '!탐험'으로 몬스터와 조우할 수 있습니다.";
} else {
return "이미 던전에 있습니다. 현재 " + dungeon.currentFloor + "층입니다.";
}
}

// 던전 탐험
function exploreDungeon() {
if (dungeon.currentFloor === 0) {
return "먼저 '!던전입장'으로 던전에 입장해야 합니다.";
}

if (dungeon.currentMonsterCount >= dungeon.monstersPerFloor) {
dungeon.currentFloor++;
dungeon.currentMonsterCount = 0;
if (dungeon.currentFloor > dungeon.maxFloor) {
dungeon.currentFloor = 0;
return "축하합니다! 던전의 모든 층을 클리어했습니다!";
}
return dungeon.currentFloor + "층으로 올라갔습니다. '!탐험'으로 계속 진행하세요.";
}

var monsterIndex = Math.min(Math.floor(Math.random() * monsters.length), dungeon.currentFloor - 1);
currentMonster = Object.assign({}, monsters[monsterIndex]);
dungeon.currentMonsterCount++;

return currentMonster.name + "을(를) 만났습니다!\n" +
"몬스터 HP: " + currentMonster.hp + "/" + currentMonster.maxHp + "\n" +
"'!공격' 또는 '!스킬'로 전투를 시작하세요.";
}

// 레벨업 체크
function checkLevelUp() {
var expNeeded = player.level * 100;
if (player.exp >= expNeeded) {
player.level++;
player.exp -= expNeeded;
player.maxHp += 10;
player.maxMp += 5;
player.attack += 2;
player.defense += 1;
player.hp = player.maxHp;
player.mp = player.maxMp;
return player.name + "의 레벨이 " + player.level + "로 올랐습니다!";
}
return "";
}

// 도움말 함수
function getHelp() {
return "사용 가능한 명령어:\n" +
"!시작 - 게임 시작\n" +
"!상태 - 플레이어 상태 확인\n" +
"!공격 - 몬스터 공격\n" +
"!스킬 - 스킬 목록 확인\n" +
"!스킬 [번호] - 스킬 사용\n" +
"!대화 - NPC와 대화\n" +
"!퀘스트 - 퀘스트 목록 확인\n" +
"!퀘스트수락 [번호] - 새로운 퀘스트 수락\n" +
"!인벤토리 - 인벤토리 확인\n" +
"!아이템사용 [번호] - 아이템 사용\n" +
"!무기목록 - 사용 가능한 무기 목록을 봅니다.\n" +
"!무기장착 [번호] - 선택한 무기를 장착합니다.\n" +
"!스킬뽑기 - 새로운 스킬 획득 (100 골드)\n" +
"!무기뽑기 - 새로운 무기 획득 (150 골드)\n" +
"!던전입장 - 던전에 입장합니다.\n" +
"!탐험 - 던전을 탐험하고 몬스터와 조우합니다.\n" +
"!룬장착 [무기ID] [룬ID] [슬롯번호] - 무기에 룬을 장착합니다.\n" +
"!무기각성 [무기ID] - 무기를 각성시킵니다.\n" +
"!룬뽑기 - 새로운 룬을 획득합니다 (100 골드).\n" +
"!도움 - 도움말 보기" +
"!직업목록 - 선택 가능한 직업 목록을 봅니다.\n" +
"!직업선택 [직업번호] - 직업을 선택합니다.\n" +
"!상점 - 상점 아이템 목록을 봅니다.\n" +
"!구매 [아이템번호] - 상점에서 아이템을 구매합니다.\n" +
"!이벤트 - 랜덤 이벤트를 발생시킵니다.\n" +
"!성장무기 - 보유 중인 성장형 무기 목록을 봅니다.\n" +
"!무기강화 [무기ID] [경험치] - 성장형 무기에 경험치를 추가합니다.\n" +
"!레이드시작 [레이드ID] - 보스 레이드를 시작합니다.\n" +
"!레이드공격 - 레이드 보스를 공격합니다.\n" +
"!맵 - 사용 가능한 맵 목록을 봅니다.\n" +
"!이동 [맵번호] - 선택한 맵으로 이동합니다.\n" +
"!사냥 - 현재 맵에서 몬스터와 조우합니다.\n" ;
}
