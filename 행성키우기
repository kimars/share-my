var planets = {};
var lastAsteroidCheck = new Date().getTime();

var resources = ['광물', '에너지', '인구', '식량'];
var buildings = ['광산', '발전소', '주거지', '방어시설', '농장'];
var upgrades = ['채굴 기술', '에너지 효율', '주거 기술', '방어 시스템', '농업 기술'];
var events = [
    { name: '태풍', type: '자연재해' },
    { name: '지진', type: '자연재해' },
    { name: '화산 폭발', type: '자연재해' },
    { name: '가뭄', type: '자연재해' },
    { name: '홍수', type: '자연재해' },
    { name: '태양 폭풍', type: '우주' },
    { name: '유성 샤워', type: '우주' },
    { name: '블랙홀 근접', type: '우주' },
    { name: '축제', type: '사회' },
    { name: '과학 혁명', type: '사회' },
    { name: '정치적 불안', type: '사회' },
    { name: '외계인 방문', type: '외계 문명' },
    { name: '우주 전쟁 위협', type: '외계 문명' },
    { name: '평화 협정', type: '외계 문명' }
];

function createPlanet(userId) {
    planets[userId] = {
        resources: {
            광물: 100,
            에너지: 100,
            인구: 10,
            식량: 100
        },
        buildings: {
            광산: 1,
            발전소: 1,
            주거지: 1,
            방어시설: 0,
            농장: 1
        },
        upgrades: {
            '채굴 기술': 1,
            '에너지 효율': 1,
            '주거 기술': 1,
            '방어 시스템': 0,
            '농업 기술': 1
        },
        lastUpdate: new Date().getTime(),
        asteroidImpacts: 0,
        casualties: 0,
        happiness: 100
    };
    return "새로운 행성이 생성되었습니다! '!행성정보'로 행성 상태를 확인하세요.";
}

function updateResources(planet) {
    var currentTime = new Date().getTime();
    var timePassed = (currentTime - planet.lastUpdate) / 1000; // 초 단위
    
    planet.resources.광물 += planet.buildings.광산 * planet.upgrades['채굴 기술'] * timePassed;
    planet.resources.에너지 += planet.buildings.발전소 * planet.upgrades['에너지 효율'] * timePassed;
    planet.resources.식량 += planet.buildings.농장 * planet.upgrades['농업 기술'] * timePassed;
    
    var populationGrowth = planet.buildings.주거지 * planet.upgrades['주거 기술'] * timePassed * 0.1;
    var foodConsumption = planet.resources.인구 * 0.1 * timePassed;
    
    if (planet.resources.식량 >= foodConsumption) {
        planet.resources.식량 -= foodConsumption;
        planet.resources.인구 = Math.min(planet.resources.인구 + populationGrowth, planet.buildings.주거지 * 100);
    } else {
        planet.resources.인구 = Math.max(planet.resources.인구 - populationGrowth, 0);
        planet.happiness = Math.max(planet.happiness - 10, 0);
    }
    
    planet.lastUpdate = currentTime;
}

function getPlanetInfo(userId) {
    var planet = planets[userId];
    if (!planet) {
        return "행성이 없습니다. '!행성생성'으로 새 행성을 만드세요.";
    }
    
    updateResources(planet);
    
    var info = "행성 정보:\n";
    for (var i = 0; i < resources.length; i++) {
        info += resources[i] + ": " + Math.floor(planet.resources[resources[i]]) + "\n";
    }
    info += "\n건물:\n";
    for (var j = 0; j < buildings.length; j++) {
        info += buildings[j] + ": " + planet.buildings[buildings[j]] + "\n";
    }
    info += "\n업그레이드:\n";
    for (var k = 0; k < upgrades.length; k++) {
        info += upgrades[k] + ": " + planet.upgrades[upgrades[k]] + "\n";
    }
    info += "\n소행성 충돌 횟수: " + planet.asteroidImpacts + "\n";
    info += "총 사상자 수: " + Math.floor(planet.casualties) + "\n";
    info += "행복도: " + Math.floor(planet.happiness) + "%\n";
    return info;
}

function buildStructure(userId, structure) {
    var planet = planets[userId];
    if (!planet) {
        return "행성이 없습니다. '!행성생성'으로 새 행성을 만드세요.";
    }
    
    updateResources(planet);
    
    var cost = Math.pow(2, planet.buildings[structure]) * 100;
    if (planet.resources.광물 < cost) {
        return structure + "을(를) 건설하기 위해 " + cost + " 광물이 필요합니다. 현재 광물: " + Math.floor(planet.resources.광물);
    }
    
    planet.resources.광물 -= cost;
    planet.buildings[structure]++;
    planet.happiness = Math.min(planet.happiness + 5, 100);
    
    return structure + "을(를) 건설했습니다. 현재 " + structure + " 수: " + planet.buildings[structure] + "\n남은 광물: " + Math.floor(planet.resources.광물);
}

function upgradetech(userId, tech) {
    var planet = planets[userId];
    if (!planet) {
        return "행성이 없습니다. '!행성생성'으로 새 행성을 만드세요.";
    }
    
    updateResources(planet);
    
    if (!planet.upgrades.hasOwnProperty(tech)) {
        return "유효하지 않은 기술입니다. 업그레이드 가능한 기술: " + upgrades.join(", ");
    }
    
    var cost = Math.pow(2, planet.upgrades[tech]) * 100;
    if (planet.resources.에너지 < cost) {
        return tech + "을(를) 업그레이드하기 위해 " + cost + " 에너지가 필요합니다. 현재 에너지: " + Math.floor(planet.resources.에너지);
    }
    
    planet.resources.에너지 -= cost;
    planet.upgrades[tech]++;
    planet.happiness = Math.min(planet.happiness + 3, 100);
    
    return tech + "을(를) 업그레이드했습니다. 현재 " + tech + " 레벨: " + planet.upgrades[tech] + "\n남은 에너지: " + Math.floor(planet.resources.에너지);
}

function asteroidImpact(userId) {
    var planet = planets[userId];
    if (!planet) {
        return;
    }
    
    updateResources(planet);
    
    var defenseLevel = planet.buildings['방어시설'] * planet.upgrades['방어 시스템'];
    var impactSeverity = Math.random() * 100;
    var casualties = 0;
    
    if (impactSeverity > defenseLevel) {
        casualties = Math.floor((impactSeverity - defenseLevel) / 10 * planet.resources.인구);
        planet.resources.인구 = Math.max(0, planet.resources.인구 - casualties);
        planet.casualties += casualties;
        
        for (var building in planet.buildings) {
            if (Math.random() < 0.3) {
                planet.buildings[building] = Math.max(0, planet.buildings[building] - 1);
            }
        }
        for (var upgrade in planet.upgrades) {
            if (Math.random() < 0.2) {
                planet.upgrades[upgrade] = Math.max(0, planet.upgrades[upgrade] - 1);
            }
        }
        planet.happiness = Math.max(planet.happiness - 20, 0);
    }
    
    planet.asteroidImpacts++;
    
    return userId + "님의 행성에 소행성이 충돌했습니다!\n" +
           "사상자 수: " + Math.floor(casualties) + "\n" +
           "현재 인구: " + Math.floor(planet.resources.인구) + "\n" +
           "행복도: " + Math.floor(planet.happiness) + "%";
}

function randomEvent(userId) {
    var planet = planets[userId];
    if (!planet) {
        return;
    }
    
    var event = events[Math.floor(Math.random() * events.length)];
    var result = userId + "님의 행성에서 " + event.name + " 이벤트가 발생했습니다!\n";
    
    switch(event.type) {
        case '자연재해':
            result += handleNaturalDisaster(planet, event.name);
            break;
        case '우주':
            result += handleSpaceEvent(planet, event.name);
            break;
        case '사회':
            result += handleSocialEvent(planet, event.name);
            break;
        case '외계 문명':
            result += handleAlienEvent(planet, event.name);
            break;
    }
    
    return result;
}

function handleNaturalDisaster(planet, eventName) {
    var result = "";
    switch(eventName) {
        case '태풍':
            planet.buildings['발전소'] = Math.max(0, planet.buildings['발전소'] - 1);
            planet.resources['에너지'] *= 0.8;
            result += "발전소 1개가 파괴되고 에너지 생산이 20% 감소했습니다.";
            break;
        case '지진':
            for (var building in planet.buildings) {
                if (Math.random() < 0.3) {
                    planet.buildings[building] = Math.max(0, planet.buildings[building] - 1);
                }
            }
            planet.resources['인구'] *= 0.9;
            result += "일부 건물이 파괴되고 인구의 10%가 감소했습니다.";
            break;
        case '화산 폭발':
            planet.resources['광물'] *= 1.2;
            planet.resources['인구'] *= 0.95;
            result += "광물 생산이 20% 증가했지만, 인구의 5%가 감소했습니다.";
            break;
        case '가뭄':
            planet.resources['식량'] *= 0.7;
            planet.happiness = Math.max(0, planet.happiness - 10);
            result += "식량 생산이 30% 감소하고 행복도가 10% 하락했습니다.";
            break;
        case '홍수':
            planet.buildings['농장'] = Math.max(0, planet.buildings['농장'] - 1);
            planet.resources['식량'] *= 0.8;
            result += "농장 1개가 파괴되고 식량 생산이 20% 감소했습니다.";
            break;
    }
    return result;
}

function handleSpaceEvent(planet, eventName) {
    var result = "";
    switch(eventName) {
        case '태양 폭풍':
            planet.resources['에너지'] *= 1.5;
            planet.upgrades['에너지 효율'] = Math.max(1, planet.upgrades['에너지 효율'] - 1);
            result += "에너지 생산이 50% 증가했지만, 에너지 효율 기술이 1단계 하락했습니다.";
            break;
        case '유성 샤워':
            planet.resources['광물'] += 1000;
            result += "1000 광물을 획득했습니다!";
            break;
        case '블랙홀 근접':
            for (var resource in planet.resources) {
                planet.resources[resource] *= Math.random() < 0.5 ? 0.8 : 1.2;
            }
            result += "모든 자원 생산량이 무작위로 변동되었습니다.";
            break;
    }
    return result;
}

function handleSocialEvent(planet, eventName) {
    var result = "";
    switch(eventName) {
        case '축제':
            planet.happiness = Math.min(100, planet.happiness + 20);
            for (var resource in planet.resources) {
                planet.resources[resource] *= 0.95;
            }
            result += "행복도가 20% 상승했지만, 모든 자원 생산이 5% 감소했습니다.";
            break;
        case '과학 혁명':
            var randomUpgrade = upgrades[Math.floor(Math.random() * upgrades.length)];
            planet.upgrades[randomUpgrade] += 2;
            result += randomUpgrade + " 기술이 2단계 상승했습니다!";
            break;
        case '정치적 불안':
            planet.happiness = Math.max(0, planet.happiness - 30);
            for (var resource in planet.resources) {
                planet.resources[resource] *= 0.9;
            }
            result += "행복도가 30% 하락하고 모든 자원 생산이 10% 감소했습니다.";
            break;
    }
    return result;
}

function handleAlienEvent(planet, eventName) {
    var result = "";
    switch(eventName) {
        case '외계인 방문':
            var randomUpgrade = upgrades[Math.floor(Math.random() * upgrades.length)];
            planet.upgrades[randomUpgrade]++;
            result += randomUpgrade + " 기술이 1단계 상승했습니다.";
            break;
        case '우주 전쟁 위협':
            planet.buildings['방어시설'] += 2;
            planet.resources['에너지'] *= 0.8;
            result += "방어시설이 2개 증가했지만, 에너지가 20% 감소했습니다.";
            break;
        case '평화 협정':
            for (var resource in planet.resources) {
                planet.resources[resource] *= 1.1;
            }
            planet.happiness = Math.min(100, planet.happiness + 10);
            result += "모든 자원이 10% 증가하고 행복도가 10% 상승했습니다.";
            break;
    }
    return result;
}

function sendEvent(userId, eventMessage) {
    if (planets[userId]) {
        try {
            replier.reply(eventMessage);
        } catch (error) {
            console.log("이벤트 전송 실패: " + error);
        }
    }
}

function checkRandomEvents() {
    var currentTime = new Date().getTime();
    if (currentTime - lastAsteroidCheck > 60000) { // 1분마다 체크
        lastAsteroidCheck = currentTime;
        for (var userId in planets) {
            if (Math.random() < 0.1) { // 10% 확률로 소행성 충돌
                var result = asteroidImpact(userId);
                if (result) {
                    sendEvent(userId, result);
                }
            }
            if (Math.random() < 0.15) { // 15% 확률로 랜덤 이벤트
                var eventResult = randomEvent(userId);
                if (eventResult) {
                    sendEvent(userId, eventResult);
                }
            }
        }
    }
}

function response(room, msg, sender, isGroupChat, replier, imageDB, packageName) {
    try {
        checkRandomEvents();
        
        if (msg === "!행성생성") {
            var result = createPlanet(sender);
            replier.reply(result);
        } else if (msg === "!행성정보") {
            var info = getPlanetInfo(sender);
            replier.reply(info);
        } else if (msg.startsWith("!건설 ")) {
            var structure = msg.split(" ").slice(1).join(" ");
            if (buildings.indexOf(structure) === -1) {
                replier.reply("유효한 건물이 아닙니다. 건설 가능한 건물: " + buildings.join(", "));
            } else {
                var result = buildStructure(sender, structure);
                replier.reply(result);
            }
        } else if (msg.startsWith("!업그레이드 ")) {
            var tech = msg.split(" ").slice(1).join(" ");
            var result = upgradetech(sender, tech);
            replier.reply(result);
        } else if (msg === "!행성도움말") {
            var helpMessage = 
                "행성 키우기 게임 도움말" + ' '.repeat(500) +
                "!행성생성 - 새 행성을 만듭니다.\n" +
                "!행성정보 - 행성의 현재 상태를 확인합니다.\n" +
                "!건설 [건물] - 건물을 건설합니다. (광산, 발전소, 주거지, 방어시설, 농장)\n" +
                "!업그레이드 [기술] - 기술을 업그레이드합니다. (채굴 기술, 에너지 효율, 주거 기술, 방어 시스템, 농업 기술)\n" +
                "!행성도움말 - 이 도움말을 표시합니다.\n\n" +
                "랜덤 이벤트 (자동 발생):\n" +
                "- 소행성 충돌\n" +
                "- 자연재해 (태풍, 지진, 화산 폭발, 가뭄, 홍수)\n" +
                "- 우주 이벤트 (태양 폭풍, 유성 샤워, 블랙홀 근접)\n" +
                "- 사회 이벤트 (축제, 과학 혁명, 정치적 불안)\n" +
                "- 외계 문명 관련 이벤트 (외계인 방문, 우주 전쟁 위협, 평화 협정)";
            replier.reply(helpMessage);
        }
    } catch (error) {
        console.log("게임 진행 중 오류 발생: " + error);
    }
}
